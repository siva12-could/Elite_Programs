// Course Schedule

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0;i<numCourses;i++){
            adj.add(new ArrayList<>());
        }
        int m= prerequisites.length;
        for(int i=0;i<m;i++){
            adj.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        int indegree[] = new int[numCourses];
        for(int i=0;i<numCourses;i++){
            for(int it:adj.get(i)){
                indegree[it]++;
            }
        }
        Queue<Integer> queue = new LinkedList<Integer>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0){
                queue.add(i);
            }
        }
        int topo[] = new int[numCourses];
        int ind=0;
        while(!queue.isEmpty()){
            int node = queue.peek();
            queue.remove();
            topo[ind++]=node;
            for(int it:adj.get(node)){
                indegree[it]--;
                if(indegree[it]==0) queue.add(it);
            }
        }
        if(ind==numCourses) return true;

        return false;
    }
}
